# -*- coding: utf-8 -*-
"""Problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15M_Ihj85vCwkJjy1eDq2iMkgiGAYW3f2
"""

import numpy as np
# The actual target value, used to calculate the error
target_actual = 3
input_data = np.array([0, 3])
# Sample weights
weights_0 = {'node_0': [2, 1],
             'node_1': [1, 2],
             'output': [1, 1]
            }

def relu(input):
    '''Define your relu activation function here'''
    # Calculate the value for the output of the relu function: output
    output = max(0, input)
    
    # Return the value just calculated
    return(output)

# Calculate node 0 value: node_0_output
node_0_input = (input_data * weights_0['node_0']).sum()
node_0_output = relu(node_0_input)

# Calculate node 1 value: node_1_output
node_1_input = (input_data * weights_0['node_1']).sum()
node_1_output = relu(node_1_input)

# Put node values into array: hidden_layer_outputs
hidden_layer_outputs = np.array([node_0_output, node_1_output])

# Calculate model output (do not apply relu)
model_output = (hidden_layer_outputs * weights_0['output']).sum()

# Print model output
print("Before training: predicited output is:", model_output)

# Calculate error: error_0
error_0 = model_output - target_actual
print("before weight optimize , error before optmizing the model", error_0)

"""Weight Updates:
---
These weight updates by the manually but this is not good apporach.
we are dealing with different methods for updating paramenters.

"""

# update weights for optimizing the model (this is done through )
# Create weights that cause the network to make perfect prediction (3): weights_1
weights_1 = {'node_0': [1, 1],
             'node_1': [1, 2],
             'output': [1, 0]
            }

# Calculate node 0 value: node_0_output
node_0_input_1 = (input_data * weights_1['node_0']).sum()
node_0_output_1 = relu(node_0_input_1)

# Calculate node 1 value: node_1_output
node_1_input_1 = (input_data * weights_1['node_1']).sum()
node_1_output_1 = relu(node_1_input_1)

# Put node values into array: hidden_layer_outputs
hidden_layer_outputs_1 = np.array([node_0_output_1, node_1_output_1])

# Calculate model output (do not apply relu)
model_output_1 = (hidden_layer_outputs_1 * weights_1['output']).sum()

# Print model output
print("After updating weight and model is  and give the same output as an actual output:", model_output_1)

# Calculate error: error_0
error_1 = model_output_1 - target_actual
print("Error after model optmiizing :",error_1)